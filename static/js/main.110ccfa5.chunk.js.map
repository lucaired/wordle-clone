{"version":3,"sources":["WordGrid.js","Keyboard.js","App.js","reportWebVitals.js","index.js"],"names":["Word","props","word","shake","className","style","display","flexDirection","columnGap","map","letter","Letter","background","color","animation","fontWeight","border","fontSize","height","width","WordGrid","words","shakingWordIndex","gridGap","justifyItems","marginTop","idx","KeyboardButtonRow","letters","colorCoding","buttonHandler","KeyboardButton","buttonStyle","backgroundColor","onClick","Keyboard","letterButtonHandler","enterButtonHandler","delButtonHandler","useState","setColorCoding","useEffect","buildColorMapping","newColorCoding","emptyGrid","forEach","label","newColor","hasOwnProperty","oldColor","undefined","slice","marginRight","marginLeft","App","chosenWord","setChosenWord","hideNotInWordList","setHideNotInWordList","setShakingWordIndex","hideWinnerNotification","setHideWinnerNotification","chooseWord","wordlist","Math","floor","random","length","toUpperCase","console","log","initializeWords","Array","fill","setWords","currentIndex","setCurrentIndex","Toast","hide","text","justifyContent","marginBottom","borderRadius","padding","position","zIndex","newWords","letterObj","join","includes","toLowerCase","i","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.110ccfa5.chunk.js","sourcesContent":["function Word(props) {\n    /**\n     * This component display a word. \n     */\n\n    const { word, shake } = props\n\n    return <div\n            className={shake ? 'guess-input' : ''}\n            style={{\n                display: 'flex',\n                flexDirection: 'row',\n                columnGap: '5px'\n            }}\n            >\n        {word.map((letter) => {\n            return <Letter letter={letter} />\n        })}\n    </div>\n}\n\nfunction Letter(props) {\n    /**\n     * This component display a single letter. If the letter has a \n     * color coding there will be a animation.\n     */\n    const { letter } = props\n    return <span\n            style={{\n                background: letter.color,\n                color: letter.color ? 'white' : 'black',\n                animation: letter.color ? '1s ease 0s 1 normal none running colorChange' : 'none',\n                fontWeight: 'bold',\n                border: '1px solid grey',\n                fontSize: '5vw',\n                height: '8vw',\n                width: '8vw',\n            }}\n        >{letter.letter}\n        </span>\n}\n\nfunction WordGrid(props) {\n    /**\n     * This components display the letters of last row, each letter\n     * also has a color coding. Here current letters have no color,\n     * green letters are in the correct place, orange somewhere in the \n     * word and grey letters are not in the word. If the letter has a \n     * color coding there will be a animation.\n     */\n    const { words, shakingWordIndex } = props\n    \n    return <div style={{\n        display: 'grid',\n        gridGap: '5px',\n        justifyItems: 'center',\n        marginTop: '5vh',\n    }}>\n        {words.map((word, idx) => {\n            return <Word\n                word={word}\n                shake={idx === shakingWordIndex}\n            />\n        })}\n    </div>\n}\n\nexport default WordGrid","import { useEffect, useState } from \"react\"\n\nfunction KeyboardButtonRow(props) {\n    /**\n     * Returns a row of buttons.\n     */\n\n    const { letters, colorCoding, buttonHandler } = props\n\n    return <div style={{\n        display: 'flex',\n        flexDirection: 'row',\n        columnGap: '5px',\n    }}>\n        {letters.map((letter) => {\n            return <KeyboardButton \n                        letter={letter} \n                        color={colorCoding[letter]} \n                        buttonHandler={buttonHandler}\n                        buttonStyle={{}}\n                    />\n        })}\n    </div>\n}\n\nfunction KeyboardButton(props) {\n    /**\n     * Returns a letter button.\n     */\n    \n    // Detructure props in letter, color and buttonHandler\n    const { letter, color, buttonHandler, buttonStyle } = props\n\n    return <button\n            className=\"letter-button\" \n            style={{ \n                backgroundColor: color,\n                ...buttonStyle \n            }} \n            onClick={() => buttonHandler(letter)}\n        >\n            {letter}\n        </button>\n}\n\nfunction Keyboard(props) {\n    /**\n     * Returns the button beign pressed and takes a color-coding for the buttons.\n     */\n    \n    // Detructure props in buttonHandler and colorCoding\n    const { letterButtonHandler, enterButtonHandler, delButtonHandler, words } = props\n\n    const [colorCoding, setColorCoding] = useState({})\n    \n    useEffect(()=> {\n        buildColorMapping(words)\n    }, [words])\n\n    // Create a list of letters\n    const letters = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Z', 'X', 'C', 'V', 'B', 'N', 'M']\n\n    const buildColorMapping = (words) => {\n        /**\n         * Green always dominates, orange only grey. This function processes\n         * changes to the words and updates the colorCoding. It will update\n         * the colorCoding only if the new color is green or orange and the\n         * old color is grey. If no color has been assigned to a letter it\n         * will not be updated. Also if no previous colors have been assigned\n         * the new color will be assigned. Furthermore, if all letters are ' '\n         * the colorCoding will be reset.\n         */\n\n        let newColorCoding = {}\n        let emptyGrid = true\n        words.forEach((word) => {\n            word.forEach((letter) => {\n                const label = letter['letter']\n                // If we encounter a non-empty letter, we know that the grid is not empty                \n                if (label !== ' ') {\n                    emptyGrid = false\n                }\n                \n                const newColor = letter['color']\n                \n                if (colorCoding.hasOwnProperty(label)) {\n                    const oldColor = colorCoding[label]\n                    if (newColor === 'green') {\n                        newColorCoding[label] = newColor\n                    }\n                    else if (oldColor === 'grey' && newColor === 'orange') {\n                        newColorCoding[label] = newColor\n                    }\n                }\n                else {\n                    if (newColor !== undefined) {\n                        newColorCoding[label] = newColor\n                    }\n                }\n            })\n        })\n        if (emptyGrid) {\n            setColorCoding({})\n        } else {\n            setColorCoding(colorCoding => {\n                return {...colorCoding, ...newColorCoding}\n            })\n        }\n    }\n\n    return <div style={{\n            display: 'grid',\n            gridGap: '5px',\n            justifyItems: 'center'\n        }}>\n            <KeyboardButtonRow \n                letters= {letters.slice(0,10)}\n                colorCoding={colorCoding}\n                buttonHandler={letterButtonHandler}\n            />\n            <KeyboardButtonRow \n                letters= {letters.slice(10, 19)} \n                colorCoding={colorCoding}\n                buttonHandler={letterButtonHandler}\n            />\n            <div style={{\n                display: 'flex',\n                flexDirection: 'row'\n            }}>\n                <KeyboardButton \n                    letter={'Enter'} \n                    color={{}} \n                    buttonHandler={enterButtonHandler}\n                    buttonStyle={{marginRight: '5px'}}\n                />\n                <KeyboardButtonRow \n                    letters= {letters.slice(19)} \n                    colorCoding={colorCoding}\n                    buttonHandler={letterButtonHandler}\n                />\n                <KeyboardButton \n                    letter={'Del'} \n                    color={{}} \n                    buttonHandler={delButtonHandler}\n                    buttonStyle={{marginLeft: '5px'}}\n                />\n            </div>\n        </div>\n}\n\nexport default Keyboard","import React, { useEffect, useState } from 'react';\n\nimport './App.css';\nimport wordlist from './wordlist.json';\nimport WordGrid from './WordGrid';\nimport Keyboard from './Keyboard';\n\nfunction App() {\n\n  const [chosenWord, setChosenWord] = useState(\"\")\n  const [hideNotInWordList, setHideNotInWordList] = useState(true)\n  const [shakingWordIndex, setShakingWordIndex] = useState(-1)\n  const [hideWinnerNotification, setHideWinnerNotification] = useState(true)\n\n  const chooseWord = () => {\n    const chosenWord = wordlist[Math.floor(Math.random() * wordlist.length)].toUpperCase()\n    console.log(chosenWord)\n    setChosenWord(chosenWord)\n  }\n\n  useEffect(() => chooseWord(), [])\n\n  /**\n   * This is the main component of the app. \n   * It contains the WordGrid and the Keyboard.\n   */\n\n  const initializeWords = () => Array(6).fill().map(() => Array(5).fill({letter: ' '}))\n  const resetWords = () => { setWords(initializeWords()); setCurrentIndex([0,0]) }\n  const [words, setWords] = useState(initializeWords())\n  /**\n   * The current index of the word grid. We will increment the inner\n   * index if there is still place in the word. The outer index\n   * will be incremented if the user presses enter and the current\n   * word is in our list of words. Furthermore, the del button will\n   * decrement the inner index if it is not 0.\n   * \n   */\n  const [currentIndex, setCurrentIndex] = useState([0,0])\n\n  const letterButtonHandler = (letter) => {\n    /**\n     * This function is called when a letter button is pressed. \n     * It will add the letter to the current word and increment\n     * the current index. If the current word is full, it will\n     * no longer increment the inner index and will not add the\n     * letter to the word.\n     */\n\n    let newWords = [...words]\n    if (currentIndex[0] < newWords.length && \n        currentIndex[1] < newWords[currentIndex[0]].length) {\n          newWords[currentIndex[0]][currentIndex[1]] = { letter: letter }\n          setWords(newWords)\n          setCurrentIndex([currentIndex[0], currentIndex[1] + 1])\n    }\n  }\n\n  const delButtonHandler = () => {\n    if (currentIndex[0] < words.length && \n        currentIndex[1] > 0 &&\n        currentIndex[1] <= words[currentIndex[0]].length) {\n          let newWords = [...words]\n          newWords[currentIndex[0]][currentIndex[1] - 1]['letter'] = ' '\n          setWords(newWords)\n          setCurrentIndex([currentIndex[0], currentIndex[1] - 1])\n        }\n  }\n\n  const currentWord = () => words[currentIndex[0]].map((letterObj) => letterObj.letter).join('')\n\n  const enterButtonHandler = () => {\n    if (currentIndex[0] < words.length && \n        currentIndex[1] === words[currentIndex[0]].length) {\n          const word = currentWord()\n          if (wordlist.includes(word.toLowerCase())) {\n\n            let newWords = [...words]\n\n            for (let i = 0; i < word.length; i++) {\n              if (word[i] === chosenWord[i]) {\n                newWords[currentIndex[0]][i]['color'] = 'green'\n              }\n              else if (chosenWord.includes(word[i])) {\n                newWords[currentIndex[0]][i]['color'] = 'orange'\n              }\n              else {\n                newWords[currentIndex[0]][i]['color'] = 'grey'\n              }\n            }\n            setCurrentIndex([currentIndex[0] + 1, 0])\n            setWords(newWords)\n\n            if (chosenWord === word) {\n              setHideWinnerNotification(false)\n              setTimeout(() => {\n                resetWords()\n                setHideWinnerNotification(true)\n                chooseWord()\n              }, 5000)\n            }\n          } else {\n            setHideNotInWordList(false)\n            setShakingWordIndex(currentIndex[0])\n            setTimeout(() => {\n              setHideNotInWordList(true)\n              setShakingWordIndex(-1)\n            }, 1000)\n          }\n    }\n  }\n\n  const Toast = (props) => {\n    const { hide, backgroundColor, text } = props\n    return <div style={{\n              display: 'flex',\n              justifyContent: 'center',\n              marginBottom: '1vw',\n            }}>\n        <p \n          style={{\n            color: 'white',\n            border: '1px solid black',\n            borderRadius: '5px',\n            backgroundColor: backgroundColor,\n            display: hide ? 'none' : 'inline-block',\n            fontSize: '3vw',\n            padding: '1vw',\n            marginTop: '-1vw',\n            fontWeight: 'bold',\n            position: 'absolute',\n            zIndex: '100',\n          }}>\n            {text}\n        </p>\n      </div>\n  }\n\n  /** TODO: coding\n   * - refactor the code so that there is only one toast component\n   * - add a timer to the toast component, showing it for 5000ms\n   * - add a listener to keydown that passes the uppercase of a letter input to the letterButtonHandler\n   * - update React deps\n   * \n\n  /* TODO: styling\n    - centralize the letter in the word grid\n    - use a toast to show the user that the word is not in the word list\n    - adapt font size to the screen size\n    - shake the keyboard when the user presses enter on a word that is not in the word list\n  */\n\n/**\n * Generate a gap between the two columns inside the \n * wordle-container div.\n */\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"wordle-title\">\n        Wordle\n      </h1>\n      <Toast\n        hide={hideNotInWordList}\n        backgroundColor='black'\n        text='Not in word list'\n      />\n      <Toast\n        hide={hideWinnerNotification}\n        backgroundColor='green'\n        text='You won!'\n      />\n      <div className=\"wordle-container\">\n        <WordGrid\n          words={words}\n          shakingWordIndex={shakingWordIndex}\n        />\n        <Keyboard\n          letterButtonHandler={letterButtonHandler}\n          enterButtonHandler={enterButtonHandler}\n          delButtonHandler={delButtonHandler}\n          words={words}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}